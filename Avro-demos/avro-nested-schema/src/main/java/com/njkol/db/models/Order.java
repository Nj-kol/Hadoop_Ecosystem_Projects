/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.njkol.db.models;  
@SuppressWarnings("all")
/** This Schema describes about Order */
@org.apache.avro.specific.AvroGenerated
public class Order extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Order\",\"namespace\":\"com.njkol.db.models\",\"doc\":\"This Schema describes about Order\",\"fields\":[{\"name\":\"order_id\",\"type\":\"long\"},{\"name\":\"customer_id\",\"type\":\"long\"},{\"name\":\"total\",\"type\":\"float\"},{\"name\":\"order_details\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OrderDetail\",\"fields\":[{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"total\",\"type\":\"float\"},{\"name\":\"product_detail\",\"type\":{\"type\":\"record\",\"name\":\"Product\",\"fields\":[{\"name\":\"product_id\",\"type\":\"long\"},{\"name\":\"product_name\",\"type\":\"string\",\"doc\":\"This is the name of the product\"},{\"name\":\"product_description\",\"type\":[\"string\",\"null\"],\"order\":\"descending\"},{\"name\":\"product_status\",\"type\":{\"type\":\"enum\",\"name\":\"product_status\",\"symbols\":[\"AVAILABLE\",\"OUT_OF_STOCK\",\"ONLY_FEW_LEFT\"]},\"default\":\"AVAILABLE\"},{\"name\":\"product_category\",\"type\":\"string\",\"doc\":\"This is the name of the product category\",\"default\":null},{\"name\":\"price\",\"type\":\"float\"}]}}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public long order_id;
  @Deprecated public long customer_id;
  @Deprecated public float total;
  @Deprecated public java.util.List<com.njkol.db.models.OrderDetail> order_details;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Order() {}

  /**
   * All-args constructor.
   */
  public Order(java.lang.Long order_id, java.lang.Long customer_id, java.lang.Float total, java.util.List<com.njkol.db.models.OrderDetail> order_details) {
    this.order_id = order_id;
    this.customer_id = customer_id;
    this.total = total;
    this.order_details = order_details;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return order_id;
    case 1: return customer_id;
    case 2: return total;
    case 3: return order_details;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: order_id = (java.lang.Long)value$; break;
    case 1: customer_id = (java.lang.Long)value$; break;
    case 2: total = (java.lang.Float)value$; break;
    case 3: order_details = (java.util.List<com.njkol.db.models.OrderDetail>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'order_id' field.
   */
  public java.lang.Long getOrderId() {
    return order_id;
  }

  /**
   * Sets the value of the 'order_id' field.
   * @param value the value to set.
   */
  public void setOrderId(java.lang.Long value) {
    this.order_id = value;
  }

  /**
   * Gets the value of the 'customer_id' field.
   */
  public java.lang.Long getCustomerId() {
    return customer_id;
  }

  /**
   * Sets the value of the 'customer_id' field.
   * @param value the value to set.
   */
  public void setCustomerId(java.lang.Long value) {
    this.customer_id = value;
  }

  /**
   * Gets the value of the 'total' field.
   */
  public java.lang.Float getTotal() {
    return total;
  }

  /**
   * Sets the value of the 'total' field.
   * @param value the value to set.
   */
  public void setTotal(java.lang.Float value) {
    this.total = value;
  }

  /**
   * Gets the value of the 'order_details' field.
   */
  public java.util.List<com.njkol.db.models.OrderDetail> getOrderDetails() {
    return order_details;
  }

  /**
   * Sets the value of the 'order_details' field.
   * @param value the value to set.
   */
  public void setOrderDetails(java.util.List<com.njkol.db.models.OrderDetail> value) {
    this.order_details = value;
  }

  /** Creates a new Order RecordBuilder */
  public static com.njkol.db.models.Order.Builder newBuilder() {
    return new com.njkol.db.models.Order.Builder();
  }
  
  /** Creates a new Order RecordBuilder by copying an existing Builder */
  public static com.njkol.db.models.Order.Builder newBuilder(com.njkol.db.models.Order.Builder other) {
    return new com.njkol.db.models.Order.Builder(other);
  }
  
  /** Creates a new Order RecordBuilder by copying an existing Order instance */
  public static com.njkol.db.models.Order.Builder newBuilder(com.njkol.db.models.Order other) {
    return new com.njkol.db.models.Order.Builder(other);
  }
  
  /**
   * RecordBuilder for Order instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Order>
    implements org.apache.avro.data.RecordBuilder<Order> {

    private long order_id;
    private long customer_id;
    private float total;
    private java.util.List<com.njkol.db.models.OrderDetail> order_details;

    /** Creates a new Builder */
    private Builder() {
      super(com.njkol.db.models.Order.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.njkol.db.models.Order.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.order_id)) {
        this.order_id = data().deepCopy(fields()[0].schema(), other.order_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customer_id)) {
        this.customer_id = data().deepCopy(fields()[1].schema(), other.customer_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.total)) {
        this.total = data().deepCopy(fields()[2].schema(), other.total);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.order_details)) {
        this.order_details = data().deepCopy(fields()[3].schema(), other.order_details);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Order instance */
    private Builder(com.njkol.db.models.Order other) {
            super(com.njkol.db.models.Order.SCHEMA$);
      if (isValidValue(fields()[0], other.order_id)) {
        this.order_id = data().deepCopy(fields()[0].schema(), other.order_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.customer_id)) {
        this.customer_id = data().deepCopy(fields()[1].schema(), other.customer_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.total)) {
        this.total = data().deepCopy(fields()[2].schema(), other.total);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.order_details)) {
        this.order_details = data().deepCopy(fields()[3].schema(), other.order_details);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'order_id' field */
    public java.lang.Long getOrderId() {
      return order_id;
    }
    
    /** Sets the value of the 'order_id' field */
    public com.njkol.db.models.Order.Builder setOrderId(long value) {
      validate(fields()[0], value);
      this.order_id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'order_id' field has been set */
    public boolean hasOrderId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'order_id' field */
    public com.njkol.db.models.Order.Builder clearOrderId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'customer_id' field */
    public java.lang.Long getCustomerId() {
      return customer_id;
    }
    
    /** Sets the value of the 'customer_id' field */
    public com.njkol.db.models.Order.Builder setCustomerId(long value) {
      validate(fields()[1], value);
      this.customer_id = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'customer_id' field has been set */
    public boolean hasCustomerId() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'customer_id' field */
    public com.njkol.db.models.Order.Builder clearCustomerId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'total' field */
    public java.lang.Float getTotal() {
      return total;
    }
    
    /** Sets the value of the 'total' field */
    public com.njkol.db.models.Order.Builder setTotal(float value) {
      validate(fields()[2], value);
      this.total = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'total' field has been set */
    public boolean hasTotal() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'total' field */
    public com.njkol.db.models.Order.Builder clearTotal() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'order_details' field */
    public java.util.List<com.njkol.db.models.OrderDetail> getOrderDetails() {
      return order_details;
    }
    
    /** Sets the value of the 'order_details' field */
    public com.njkol.db.models.Order.Builder setOrderDetails(java.util.List<com.njkol.db.models.OrderDetail> value) {
      validate(fields()[3], value);
      this.order_details = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'order_details' field has been set */
    public boolean hasOrderDetails() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'order_details' field */
    public com.njkol.db.models.Order.Builder clearOrderDetails() {
      order_details = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Order build() {
      try {
        Order record = new Order();
        record.order_id = fieldSetFlags()[0] ? this.order_id : (java.lang.Long) defaultValue(fields()[0]);
        record.customer_id = fieldSetFlags()[1] ? this.customer_id : (java.lang.Long) defaultValue(fields()[1]);
        record.total = fieldSetFlags()[2] ? this.total : (java.lang.Float) defaultValue(fields()[2]);
        record.order_details = fieldSetFlags()[3] ? this.order_details : (java.util.List<com.njkol.db.models.OrderDetail>) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
