/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.njkol.avro.models.customer;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CustomerAddress extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4481732298842696316L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CustomerAddress\",\"namespace\":\"com.njkol.avro.models.customer\",\"fields\":[{\"name\":\"address\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"city\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"postcode\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"int\"]},{\"name\":\"address_type\",\"type\":{\"type\":\"enum\",\"name\":\"address_type\",\"symbols\":[\"POBOX\",\"RESIDENTIAL\",\"ENTERPRISE\"]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CustomerAddress> ENCODER =
      new BinaryMessageEncoder<CustomerAddress>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CustomerAddress> DECODER =
      new BinaryMessageDecoder<CustomerAddress>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CustomerAddress> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CustomerAddress> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CustomerAddress> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CustomerAddress>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CustomerAddress to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CustomerAddress from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CustomerAddress instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CustomerAddress fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String address;
   private java.lang.String city;
   private java.lang.Object postcode;
   private com.njkol.avro.models.customer.address_type address_type;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CustomerAddress() {}

  /**
   * All-args constructor.
   * @param address The new value for address
   * @param city The new value for city
   * @param postcode The new value for postcode
   * @param address_type The new value for address_type
   */
  public CustomerAddress(java.lang.String address, java.lang.String city, java.lang.Object postcode, com.njkol.avro.models.customer.address_type address_type) {
    this.address = address;
    this.city = city;
    this.postcode = postcode;
    this.address_type = address_type;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return address;
    case 1: return city;
    case 2: return postcode;
    case 3: return address_type;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: address = (java.lang.String)value$; break;
    case 1: city = (java.lang.String)value$; break;
    case 2: postcode = value$; break;
    case 3: address_type = (com.njkol.avro.models.customer.address_type)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'address' field.
   * @return The value of the 'address' field.
   */
  public java.lang.String getAddress() {
    return address;
  }



  /**
   * Gets the value of the 'city' field.
   * @return The value of the 'city' field.
   */
  public java.lang.String getCity() {
    return city;
  }



  /**
   * Gets the value of the 'postcode' field.
   * @return The value of the 'postcode' field.
   */
  public java.lang.Object getPostcode() {
    return postcode;
  }



  /**
   * Gets the value of the 'address_type' field.
   * @return The value of the 'address_type' field.
   */
  public com.njkol.avro.models.customer.address_type getAddressType() {
    return address_type;
  }



  /**
   * Creates a new CustomerAddress RecordBuilder.
   * @return A new CustomerAddress RecordBuilder
   */
  public static com.njkol.avro.models.customer.CustomerAddress.Builder newBuilder() {
    return new com.njkol.avro.models.customer.CustomerAddress.Builder();
  }

  /**
   * Creates a new CustomerAddress RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CustomerAddress RecordBuilder
   */
  public static com.njkol.avro.models.customer.CustomerAddress.Builder newBuilder(com.njkol.avro.models.customer.CustomerAddress.Builder other) {
    if (other == null) {
      return new com.njkol.avro.models.customer.CustomerAddress.Builder();
    } else {
      return new com.njkol.avro.models.customer.CustomerAddress.Builder(other);
    }
  }

  /**
   * Creates a new CustomerAddress RecordBuilder by copying an existing CustomerAddress instance.
   * @param other The existing instance to copy.
   * @return A new CustomerAddress RecordBuilder
   */
  public static com.njkol.avro.models.customer.CustomerAddress.Builder newBuilder(com.njkol.avro.models.customer.CustomerAddress other) {
    if (other == null) {
      return new com.njkol.avro.models.customer.CustomerAddress.Builder();
    } else {
      return new com.njkol.avro.models.customer.CustomerAddress.Builder(other);
    }
  }

  /**
   * RecordBuilder for CustomerAddress instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CustomerAddress>
    implements org.apache.avro.data.RecordBuilder<CustomerAddress> {

    private java.lang.String address;
    private java.lang.String city;
    private java.lang.Object postcode;
    private com.njkol.avro.models.customer.address_type address_type;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.njkol.avro.models.customer.CustomerAddress.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.address)) {
        this.address = data().deepCopy(fields()[0].schema(), other.address);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.city)) {
        this.city = data().deepCopy(fields()[1].schema(), other.city);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.postcode)) {
        this.postcode = data().deepCopy(fields()[2].schema(), other.postcode);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.address_type)) {
        this.address_type = data().deepCopy(fields()[3].schema(), other.address_type);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing CustomerAddress instance
     * @param other The existing instance to copy.
     */
    private Builder(com.njkol.avro.models.customer.CustomerAddress other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.address)) {
        this.address = data().deepCopy(fields()[0].schema(), other.address);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.city)) {
        this.city = data().deepCopy(fields()[1].schema(), other.city);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.postcode)) {
        this.postcode = data().deepCopy(fields()[2].schema(), other.postcode);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.address_type)) {
        this.address_type = data().deepCopy(fields()[3].schema(), other.address_type);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'address' field.
      * @return The value.
      */
    public java.lang.String getAddress() {
      return address;
    }


    /**
      * Sets the value of the 'address' field.
      * @param value The value of 'address'.
      * @return This builder.
      */
    public com.njkol.avro.models.customer.CustomerAddress.Builder setAddress(java.lang.String value) {
      validate(fields()[0], value);
      this.address = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'address' field has been set.
      * @return True if the 'address' field has been set, false otherwise.
      */
    public boolean hasAddress() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'address' field.
      * @return This builder.
      */
    public com.njkol.avro.models.customer.CustomerAddress.Builder clearAddress() {
      address = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'city' field.
      * @return The value.
      */
    public java.lang.String getCity() {
      return city;
    }


    /**
      * Sets the value of the 'city' field.
      * @param value The value of 'city'.
      * @return This builder.
      */
    public com.njkol.avro.models.customer.CustomerAddress.Builder setCity(java.lang.String value) {
      validate(fields()[1], value);
      this.city = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'city' field has been set.
      * @return True if the 'city' field has been set, false otherwise.
      */
    public boolean hasCity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'city' field.
      * @return This builder.
      */
    public com.njkol.avro.models.customer.CustomerAddress.Builder clearCity() {
      city = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'postcode' field.
      * @return The value.
      */
    public java.lang.Object getPostcode() {
      return postcode;
    }


    /**
      * Sets the value of the 'postcode' field.
      * @param value The value of 'postcode'.
      * @return This builder.
      */
    public com.njkol.avro.models.customer.CustomerAddress.Builder setPostcode(java.lang.Object value) {
      validate(fields()[2], value);
      this.postcode = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'postcode' field has been set.
      * @return True if the 'postcode' field has been set, false otherwise.
      */
    public boolean hasPostcode() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'postcode' field.
      * @return This builder.
      */
    public com.njkol.avro.models.customer.CustomerAddress.Builder clearPostcode() {
      postcode = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'address_type' field.
      * @return The value.
      */
    public com.njkol.avro.models.customer.address_type getAddressType() {
      return address_type;
    }


    /**
      * Sets the value of the 'address_type' field.
      * @param value The value of 'address_type'.
      * @return This builder.
      */
    public com.njkol.avro.models.customer.CustomerAddress.Builder setAddressType(com.njkol.avro.models.customer.address_type value) {
      validate(fields()[3], value);
      this.address_type = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'address_type' field has been set.
      * @return True if the 'address_type' field has been set, false otherwise.
      */
    public boolean hasAddressType() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'address_type' field.
      * @return This builder.
      */
    public com.njkol.avro.models.customer.CustomerAddress.Builder clearAddressType() {
      address_type = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @SuppressWarnings("unchecked")
    public CustomerAddress build() {
      try {
        CustomerAddress record = new CustomerAddress();
        record.address = fieldSetFlags()[0] ? this.address : (java.lang.String) defaultValue(fields()[0]);
        record.city = fieldSetFlags()[1] ? this.city : (java.lang.String) defaultValue(fields()[1]);
        record.postcode = fieldSetFlags()[2] ? this.postcode :  defaultValue(fields()[2]);
        record.address_type = fieldSetFlags()[3] ? this.address_type : (com.njkol.avro.models.customer.address_type) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CustomerAddress>
    WRITER$ = (org.apache.avro.io.DatumWriter<CustomerAddress>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CustomerAddress>
    READER$ = (org.apache.avro.io.DatumReader<CustomerAddress>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










